"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkofilm_web"] = self["webpackChunkofilm_web"] || []).push([["src_hooks_fence_draw_ts"],{

/***/ "./src/hooks/fence/draw.ts":
/*!*********************************!*\
  !*** ./src/hooks/fence/draw.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DrawFence\": () => (/* binding */ DrawFence)\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/src/index.js\");\n/* harmony import */ var _config_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/common */ \"./src/config/common.ts\");\n\r\n\r\nclass DrawFence {\r\n    svg;\r\n    drawPolygon = false;\r\n    drawRect = false;\r\n    drawCircle = false;\r\n    standard = 1000;\r\n    callback;\r\n    editAble = false;\r\n    editCallback;\r\n    constructor(wrapper, callback, editCallback) {\r\n        this.svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(wrapper).append(\"svg\").attr(\"class\", \"draw-svg\").style(\"display\", \"none\");\r\n        this.callback = callback;\r\n        this.editCallback = editCallback;\r\n    }\r\n    startDrawPolygon() {\r\n        this.initDrawPolygon();\r\n        this.drawPolygon = true;\r\n    }\r\n    startDrawRect() {\r\n        this.initDrawRect();\r\n        this.drawRect = true;\r\n    }\r\n    startDrawCircle() {\r\n        this.drawCircle = true;\r\n    }\r\n    hideDrawSvg() {\r\n        this.svg.style(\"display\", \"none\");\r\n        this.svg.selectAll(\"g.fence-g\").remove();\r\n    }\r\n    showDrawSvg() {\r\n        this.svg.style(\"display\", \"block\");\r\n    }\r\n    delFence(id) {\r\n        this.svg.select(\"g.g-\" + id).remove();\r\n    }\r\n    setFenceLevel(g, id, level) {\r\n        g.select(\"#\" + id).style(\"fill\", _config_common__WEBPACK_IMPORTED_MODULE_1__.colors[level]);\r\n    }\r\n    // 将数据库获取的坐标转换为地图坐标\r\n    convertPointsToShow(data, width) {\r\n        const f = (b) => {\r\n            return b.map((item) => {\r\n                if (typeof item === \"object\") {\r\n                    return f(item);\r\n                }\r\n                return +(item * width / this.standard).toFixed(2);\r\n            });\r\n        };\r\n        return f(data);\r\n    }\r\n    // 将地图坐标转换存储数据库\r\n    convertPointsToSave(data, width) {\r\n        const f = (b) => {\r\n            return b.map((item) => {\r\n                if (typeof item === \"object\") {\r\n                    return f(item);\r\n                }\r\n                return +(item * this.standard / width).toFixed(2);\r\n            });\r\n        };\r\n        return f(data);\r\n    }\r\n    // 画图与展示之间的坐标转化\r\n    swithPoints(transform, data, drawing) {\r\n        const s = (m, k, t) => {\r\n            const r = drawing ? m * k + t : (m - t) / k;\r\n            return +r.toFixed(2);\r\n        };\r\n        let res = [];\r\n        const k = transform.k;\r\n        const x = transform.x;\r\n        const y = transform.y;\r\n        if (data.type === \"polygon\") {\r\n            return data.points.map(item => [s(item[0], k, x), s(item[1], k, y)]);\r\n        }\r\n        if (data.type === \"rect\") {\r\n            const p = data.points;\r\n            return [s(p[0], k, x), s(p[1], k, y), s(p[2], k, 0), s(p[3], k, 0)];\r\n        }\r\n        return res;\r\n    }\r\n    // 插入多边形围栏\r\n    insertPolygon(g, id, points) {\r\n        const poly = g.append('polygon')\r\n            .attr(\"class\", \"fence polygon\")\r\n            .attr(\"id\", id)\r\n            .attr('points', points)\r\n            .style('fill', _config_common__WEBPACK_IMPORTED_MODULE_1__.colors[1])\r\n            .style(\"opacity\", \"0.4\");\r\n        poly.on(\"click\", () => {\r\n            if (!this.editAble)\r\n                return;\r\n            this.clearEditStatu();\r\n            g.select(\"polygon\").style(\"opacity\", \".9\");\r\n            g.selectAll(\"circle\").style(\"display\", \"block\");\r\n            this.editCallback(id);\r\n        });\r\n        for (let i = 0; i < points.length; i++) {\r\n            let circle = g\r\n                .append('circle')\r\n                .attr(\"class\", \"fence\")\r\n                .attr('cx', points[i][0])\r\n                .attr('cy', points[i][1])\r\n                .attr('r', 6)\r\n                .attr('fill', '#FDBC07')\r\n                .attr('stroke', '#000')\r\n                .attr('is-handle', 'true')\r\n                .style(\"cursor\", \"nesw-resize\")\r\n                .style(\"display\", \"none\");\r\n            circle.call(d3__WEBPACK_IMPORTED_MODULE_0__.drag().on(\"start\", this.polygonDrag()));\r\n        }\r\n    }\r\n    // 插入矩形\r\n    insertRect(g, id, points) {\r\n        let rect = {}, circle = {};\r\n        if (d3__WEBPACK_IMPORTED_MODULE_0__.select(\"#\" + id).size() > 0) {\r\n            rect = d3__WEBPACK_IMPORTED_MODULE_0__.select(\"#\" + id);\r\n            circle = g.select(\"circle.fence\");\r\n        }\r\n        else {\r\n            rect = g.append(\"rect\")\r\n                .attr(\"class\", \"fence rect\")\r\n                .attr(\"id\", id)\r\n                .style('fill', _config_common__WEBPACK_IMPORTED_MODULE_1__.colors[1])\r\n                .style(\"opacity\", \"0.4\");\r\n            circle = g.append('circle')\r\n                .attr(\"class\", \"fence\")\r\n                .attr('r', 6)\r\n                .attr('fill', '#FDBC07')\r\n                .attr('stroke', '#000')\r\n                .attr('is-handle', 'true')\r\n                .style(\"cursor\", \"nwse-resize\")\r\n                .style(\"display\", \"none\");\r\n        }\r\n        if (points[2] > 0 && points[3] > 0) {\r\n            rect.attr(\"x\", points[0])\r\n                .attr(\"y\", points[1])\r\n                .attr(\"width\", points[2])\r\n                .attr(\"height\", points[3]);\r\n            circle.attr('cx', points[0] + points[2])\r\n                .attr('cy', points[1] + points[3]);\r\n        }\r\n        rect.on(\"click\", () => {\r\n            if (!this.editAble)\r\n                return;\r\n            this.clearEditStatu();\r\n            g.select(\"rect\").style(\"opacity\", \".9\").style(\"cursor\", \"move\");\r\n            g.selectAll(\"circle\").style(\"display\", \"block\");\r\n            this.editCallback(id);\r\n            rect.call(d3__WEBPACK_IMPORTED_MODULE_0__.drag().on(\"start\", this.rectDrag()));\r\n        });\r\n        circle.call(d3__WEBPACK_IMPORTED_MODULE_0__.drag().on(\"start\", this.rectCircleDrag()));\r\n    }\r\n    // 插入围栏\r\n    insertFence(container, data) {\r\n        let g = {};\r\n        if (d3__WEBPACK_IMPORTED_MODULE_0__.select(\".g-\" + data.id).size() > 0) {\r\n            g = d3__WEBPACK_IMPORTED_MODULE_0__.select(\".g-\" + data.id);\r\n        }\r\n        else {\r\n            g = container.append(\"g\").attr(\"class\", \"fence-g g-\" + data.id);\r\n        }\r\n        const points = data.points;\r\n        if (data.type === \"polygon\") {\r\n            this.insertPolygon(g, data.id, points);\r\n        }\r\n        if (data.type === \"rect\") {\r\n            this.insertRect(g, data.id, points);\r\n        }\r\n    }\r\n    // 清除编辑状态\r\n    clearEditStatu() {\r\n        d3__WEBPACK_IMPORTED_MODULE_0__.selectAll(\".fence\").style(\"opacity\", \".6\");\r\n        d3__WEBPACK_IMPORTED_MODULE_0__.selectAll(\"rect.fence\").style(\"cursor\", \"default\"); // 清除矩形的鼠标样式\r\n        d3__WEBPACK_IMPORTED_MODULE_0__.selectAll(\"circle.fence\").style(\"display\", \"none\");\r\n    }\r\n    rectDrag() {\r\n        const that = this;\r\n        return function (event, d) {\r\n            const self = this;\r\n            const rect = d3__WEBPACK_IMPORTED_MODULE_0__.select(self).classed(\"dragging\", true);\r\n            const circle = d3__WEBPACK_IMPORTED_MODULE_0__.select(self.parentNode).select('circle');\r\n            const _x = +rect.attr(\"x\");\r\n            const _y = +rect.attr(\"y\");\r\n            const width = +rect.attr(\"width\");\r\n            const height = +rect.attr(\"height\");\r\n            event.on(\"drag\", dragged).on(\"end\", ended);\r\n            const startPoints = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, self);\r\n            function dragged(e) {\r\n                const points = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(e, self);\r\n                const dis_x = points[0] - startPoints[0];\r\n                const dis_y = points[1] - startPoints[1];\r\n                const new_x = _x + dis_x;\r\n                const new_y = _y + dis_y;\r\n                rect.attr(\"x\", new_x).attr(\"y\", new_y);\r\n                circle.attr(\"cx\", new_x + width).attr(\"cy\", new_y + height);\r\n                that.callback({\r\n                    type: \"rect\",\r\n                    points: [new_x, new_y, width, height],\r\n                    id: rect.attr(\"id\")\r\n                });\r\n            }\r\n            function ended() {\r\n                rect.classed(\"dragging\", false);\r\n            }\r\n        };\r\n    }\r\n    rectCircleDrag() {\r\n        if (!this.editAble)\r\n            return;\r\n        const that = this;\r\n        return function (event, d) {\r\n            const self = this;\r\n            const dragCircle = d3__WEBPACK_IMPORTED_MODULE_0__.select(self).classed(\"dragging\", true);\r\n            const rect = d3__WEBPACK_IMPORTED_MODULE_0__.select(self.parentNode).select('rect');\r\n            const _x = +rect.attr(\"x\");\r\n            const _y = +rect.attr(\"y\");\r\n            event.on(\"drag\", dragged).on(\"end\", ended);\r\n            function dragged(e) {\r\n                const newPoints = [];\r\n                const points = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(e, self);\r\n                const width = points[0] - _x;\r\n                const height = points[1] - _y;\r\n                if (width > 0 && height > 0) {\r\n                    dragCircle\r\n                        .attr('cx', points[0])\r\n                        .attr('cy', points[1]);\r\n                    rect.attr(\"width\", points[0] - _x).attr(\"height\", points[1] - _y);\r\n                }\r\n                that.callback({\r\n                    type: \"rect\",\r\n                    points: [_x, _y, width, height],\r\n                    id: rect.attr(\"id\")\r\n                });\r\n            }\r\n            function ended() {\r\n                dragCircle.classed(\"dragging\", false);\r\n            }\r\n        };\r\n    }\r\n    // 多边形拖拽\r\n    polygonDrag() {\r\n        const that = this;\r\n        return function (event, d) {\r\n            const self = this;\r\n            const dragCircle = d3__WEBPACK_IMPORTED_MODULE_0__.select(self).classed(\"dragging\", true);\r\n            const poly = d3__WEBPACK_IMPORTED_MODULE_0__.select(self.parentNode).select('polygon');\r\n            const circles = d3__WEBPACK_IMPORTED_MODULE_0__.select(self.parentNode).selectAll('circle');\r\n            event.on(\"drag\", dragged).on(\"end\", ended);\r\n            function dragged(e) {\r\n                const newPoints = [];\r\n                const points = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(e, self);\r\n                dragCircle\r\n                    .attr('cx', points[0])\r\n                    .attr('cy', points[1]);\r\n                circles.each(function (d) {\r\n                    const ele = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);\r\n                    const p = [+ele.attr(\"cx\"), +ele.attr(\"cy\")];\r\n                    newPoints.push(p);\r\n                });\r\n                poly.attr('points', newPoints);\r\n                that.callback({\r\n                    type: \"polygon\",\r\n                    points: newPoints,\r\n                    id: poly.attr(\"id\")\r\n                });\r\n            }\r\n            function ended() {\r\n                dragCircle.classed(\"dragging\", false);\r\n            }\r\n        };\r\n    }\r\n    getFenceId() {\r\n        return \"fence\" + new Date().getTime().toString();\r\n    }\r\n    // 初始化多边形围栏的绘制\r\n    initDrawPolygon() {\r\n        const that = this;\r\n        let drawing = false, dragging = false, g, curPoints = [], pointsArr = [];\r\n        const handleDrag = function (event) {\r\n            if (drawing)\r\n                return;\r\n            const self = this;\r\n            let dragCircle = d3__WEBPACK_IMPORTED_MODULE_0__.select(this).classed(\"dragging\", true);\r\n            let poly = d3__WEBPACK_IMPORTED_MODULE_0__.select(this.parentNode).select('polygon');\r\n            let circles = d3__WEBPACK_IMPORTED_MODULE_0__.select(this.parentNode).selectAll('circle');\r\n            event.on(\"drag\", dragged).on(\"end\", ended);\r\n            function dragged(e) {\r\n                let newPoints = [];\r\n                let points = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(e, self);\r\n                dragCircle\r\n                    .attr('cx', points[0])\r\n                    .attr('cy', points[1]);\r\n                circles.each(function (d) {\r\n                    const ele = d3__WEBPACK_IMPORTED_MODULE_0__.select(this);\r\n                    const p = [+ele.attr(\"cx\"), +ele.attr(\"cy\")];\r\n                    newPoints.push(p);\r\n                });\r\n                poly.attr('points', newPoints);\r\n            }\r\n            function ended() {\r\n                dragCircle.classed(\"dragging\", false);\r\n            }\r\n        };\r\n        const closePolygon = () => {\r\n            this.svg.select(\".drawPoly\").remove();\r\n            const id = this.getFenceId();\r\n            const fenceData = {\r\n                type: \"polygon\",\r\n                points: pointsArr,\r\n                id\r\n            };\r\n            this.insertFence(this.svg, fenceData);\r\n            drawing = false;\r\n            that.callback(fenceData);\r\n            pointsArr = [];\r\n            that.drawPolygon = false;\r\n        };\r\n        this.svg.on(\"mouseup\", function (event) {\r\n            if (!that.drawPolygon)\r\n                return;\r\n            if (dragging)\r\n                return;\r\n            drawing = true;\r\n            curPoints = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this);\r\n            if (that.svg.select(\"g.drawPoly\").empty()) {\r\n                g = that.svg.append(\"g\").attr(\"class\", \"drawPoly\");\r\n            }\r\n            if (event.target.hasAttribute('is-handle')) {\r\n                closePolygon();\r\n                return;\r\n            }\r\n            ;\r\n            pointsArr.push(d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this));\r\n            g.select(\"polyline\").remove();\r\n            g.append(\"polyline\").attr(\"points\", pointsArr).style('fill', 'none')\r\n                .attr('stroke', '#000');\r\n            for (let i = 0; i < pointsArr.length; i++) {\r\n                g.append('circle')\r\n                    .attr('cx', pointsArr[i][0])\r\n                    .attr('cy', pointsArr[i][1])\r\n                    .attr('r', 6)\r\n                    .attr('fill', 'yellow')\r\n                    .attr('stroke', '#000')\r\n                    .attr('is-handle', 'true')\r\n                    .style(\"cursor\", \"pointer\");\r\n            }\r\n        });\r\n        this.svg.on(\"mousemove\", function (event) {\r\n            if (!that.drawPolygon)\r\n                return;\r\n            if (!drawing)\r\n                return;\r\n            g.select(\"line\").remove();\r\n            g.append('line')\r\n                .attr('x1', curPoints[0])\r\n                .attr('y1', curPoints[1])\r\n                .attr('x2', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[0] + 2)\r\n                .attr('y2', d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this)[1])\r\n                .attr('stroke', '#53DBF3')\r\n                .attr('stroke-width', 1);\r\n        });\r\n    }\r\n    initDrawRect() {\r\n        const that = this;\r\n        let drawing = false, startPoint = [], curPoint = [], id = \"\";\r\n        this.svg.on(\"mousedown\", function (event) {\r\n            if (!that.drawRect)\r\n                return;\r\n            drawing = true;\r\n            id = that.getFenceId();\r\n            startPoint = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this);\r\n        });\r\n        this.svg.on(\"mouseup\", function (event) {\r\n            if (drawing) {\r\n                drawing = false;\r\n                const fenceData = {\r\n                    type: \"rect\",\r\n                    points: [startPoint[0], startPoint[1], curPoint[0] - startPoint[0], curPoint[1] - startPoint[1]],\r\n                    id\r\n                };\r\n                that.callback(fenceData);\r\n                that.drawRect = false;\r\n            }\r\n        });\r\n        this.svg.on(\"mousemove\", function (event) {\r\n            if (!that.drawRect)\r\n                return;\r\n            if (!drawing)\r\n                return;\r\n            curPoint = d3__WEBPACK_IMPORTED_MODULE_0__.pointer(event, this);\r\n            const fenceData = {\r\n                type: \"rect\",\r\n                points: [startPoint[0], startPoint[1], curPoint[0] - startPoint[0], curPoint[1] - startPoint[1]],\r\n                id\r\n            };\r\n            that.insertFence(that.svg, fenceData);\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://ofilm-web/./src/hooks/fence/draw.ts?");

/***/ })

}]);