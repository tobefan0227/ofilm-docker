"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkofilm_web"] = self["webpackChunkofilm_web"] || []).push([["src_utils_svgMap_ts"],{

/***/ "./src/utils/svgMap.ts":
/*!*****************************!*\
  !*** ./src/utils/svgMap.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SvgMapRender\": () => (/* binding */ SvgMapRender),\n/* harmony export */   \"MapSvgRender\": () => (/* binding */ MapSvgRender)\n/* harmony export */ });\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/src/index.js\");\n/* harmony import */ var _lang_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lang/index */ \"./src/lang/index.ts\");\n/* harmony import */ var _config_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/common */ \"./src/config/common.ts\");\n/* harmony import */ var _api_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../api/api */ \"./src/api/api.ts\");\n\r\n\r\n\r\n\r\nconst tagPath = \"M210.307143 724.056458a422.3956 422.3956 0 0 1 0-599.801752c166.611598-165.672941 436.774117-165.672941 603.385714 0a422.3956 422.3956 0 0 1 0 599.844418L512 1024l-301.692857-299.943542zM512 554.671556a127.998667 127.998667 0 1 0 0-255.997334 127.998667 127.998667 0 0 0 0 255.997334z\";\r\nconst stationPath1 = \"M815.999828 464.000317c0 58.599967-16.599991 113.199936-45.199975 159.59991-16.199991 26.199985-52.79997 30.299983-74.599957 8.499995-15.799991-15.799991-18.49999-40.299977-6.799996-59.299966C709.299888 540.400274 719.999882 503.000295 719.999882 464.000317c0-55.599969-21.599988-107.799939-60.899965-147.099916S567.599969 256.000435 512 256.000435s-107.799939 21.599988-147.099917 60.899966S304.000118 408.400349 304.000118 464.000317c0 38.999978 10.699994 76.399957 30.599982 108.799939 11.699993 18.999989 8.999995 43.599975-6.799996 59.299966-21.799988 21.799988-58.399967 17.69999-74.599957-8.499995-28.599984-46.399974-45.199974-100.999943-45.199975-159.59991 0-167.899905 136.099923-303.999828 303.999828-303.999828s303.999828 136.099923 303.999828 303.999828z\";\r\nconst stationPath2 = \"M975.999737 465.300316c-0.3 103.799941-34.69998 199.599887-92.499947 276.699844-17.49999 23.399987-51.699971 25.799985-72.299959 5.099997-16.89999-16.89999-18.699989-43.699975-4.299998-62.899965 17.79999-23.799987 32.599982-49.499972 44.299975-77.099956C870.299797 561.900262 879.999792 513.700289 879.999792 464.000317c0-49.699972-9.699995-97.899945-28.899984-143.199919-18.49999-43.799975-45.099974-83.199953-78.899955-116.999933-33.799981-33.799981-73.199959-60.399966-116.999934-78.899956C609.899945 105.70052 561.699972 96.000526 512 96.000526s-97.899945 9.699995-143.199919 28.899983c-43.799975 18.49999-83.199953 45.099974-116.999934 78.899956-33.799981 33.799981-60.399966 73.199959-78.899955 116.999933C153.700203 366.100373 144.000208 414.300345 144.000208 464.000317c0 49.699972 9.699995 97.899945 28.899984 143.199919 11.699993 27.499984 26.499985 53.29997 44.299975 77.099956 14.399992 19.199989 12.599993 45.899974-4.299998 62.899965-20.699988 20.699988-54.899969 18.09999-72.399959-5.299997C82.400243 664.400204 48.000263 568.200258 48.000263 464.000317 48.000263 207.500462 256.100145-0.39942 512.7 0.00058c256.999854 0.4 463.999737 208.299882 463.299737 465.299736z\";\r\nconst stationPath3 = \"M591.999955 960.000036h43.999975c2.199999 0 3.999998 1.799999 3.999998 3.999998v55.999968c0 2.199999-1.799999 3.999998-3.999998 3.999998H388.00007c-2.199999 0-3.999998-1.799999-3.999998-3.999998v-55.999968c0-2.199999 1.799999-3.999998 3.999998-3.999998h43.999975c17.69999 0 31.999982-14.299992 31.999982-31.999982V619.900229c0-20.499988-9.799994-39.899977-26.499985-51.899971-32.599982-23.399987-53.79997-61.799965-53.49997-105.09994 0.5-70.69996 58.999967-127.899928 129.699927-126.999928 69.89996 0.899999 126.299928 57.899967 126.299929 127.999927 0 42.899976-21.099988 80.899954-53.49997 104.099941-16.699991 11.999993-26.499985 31.299982-26.499985 51.799971V928.000054c0 17.69999 14.299992 31.999982 31.999982 31.999982z\";\r\nclass SvgMapRender {\r\n    element; // 渲染容器对象\r\n    transform = { k: 1, x: 0, y: 0 };\r\n    svgObj; // svg对象\r\n    svgTextObj; // 文本提示框对象\r\n    scale = 1; // 真实场景与地图之间的比例\r\n    svgHeight = 500; // 展示高度默认500\r\n    tagList = []; // 存储所有的标签数据\r\n    svgTagList = []; // 存储标签的svg对象\r\n    countdownTimer = {}; // 倒计时\r\n    constructor(element) {\r\n        this.element = element;\r\n        this.initSvg();\r\n    }\r\n    initSvg() {\r\n        const that = this;\r\n        const zoom = d3__WEBPACK_IMPORTED_MODULE_0__.zoom().scaleExtent([0.2, 10]);\r\n        // 删除上次初始化的SVG\r\n        this.element.innerHTML = \"\";\r\n        const g = d3__WEBPACK_IMPORTED_MODULE_0__.select(\".\" + this.element.className)\r\n            .append(\"svg\")\r\n            .attr(\"class\", \"out-svg\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"height\", \"100%\")\r\n            .call(zoom.on(\"zoom\", function (event) {\r\n            that.transform = event.transform;\r\n            g.attr(\"transform\", event.transform);\r\n        }))\r\n            .append(\"g\");\r\n        // 使用占茅坑法，保证文本框永远在上面\r\n        this.svgObj = g.append(\"g\");\r\n        // 创建文本内容提示框\r\n        this.svgTextObj = g\r\n            .append(\"g\")\r\n            .attr(\"style\", \"display:none;\");\r\n        this.renderRectText();\r\n    }\r\n    clearSvg() {\r\n        this.svgObj.selectAll(\"image\").remove();\r\n    }\r\n    // 注入数据\r\n    async dataInject(svgMap, stationList) {\r\n        this.clearSvg();\r\n        const attr = await this.getMapImageAttr(svgMap);\r\n        this.scale = this.calcScale(attr, svgMap);\r\n        this.svgHeight = attr.height;\r\n        this.element.style.height = attr.height + \"px\";\r\n        this.renderMap(svgMap, attr);\r\n        if (stationList) {\r\n            stationList.forEach(station => this.renderStation(station));\r\n        }\r\n    }\r\n    // 转换y轴坐标，页面零点在左上，基站定位零点在左下\r\n    switchY(y) {\r\n        return this.svgHeight - y;\r\n    }\r\n    // 获取地图图片的宽高\r\n    getMapImageAttr(svgMap) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = _config_common__WEBPACK_IMPORTED_MODULE_2__.img_base_url + svgMap.url;\r\n            let img = new Image();\r\n            img.src = url;\r\n            img.onload = () => {\r\n                let imgW = img.width, imgH = img.height, svgW = this.element.offsetWidth;\r\n                if (imgW > svgW) {\r\n                    let computH = Math.floor((svgW * imgH) / imgW);\r\n                    resolve({\r\n                        width: svgW,\r\n                        height: computH,\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        width: imgW,\r\n                        height: imgH,\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    // 计算比例\r\n    calcScale(attr, svgMap) {\r\n        const width = svgMap.width;\r\n        const height = svgMap.height;\r\n        if (!!width) {\r\n            return attr.width / (width * 1000);\r\n        }\r\n        else {\r\n            return attr.height / (height * 1000);\r\n        }\r\n    }\r\n    renderMap(svgMap, attr) {\r\n        this.svgObj\r\n            .append(\"image\")\r\n            .attr(\"xlink:href\", _config_common__WEBPACK_IMPORTED_MODULE_2__.img_base_url + svgMap.url)\r\n            .attr(\"width\", attr.width)\r\n            .attr(\"height\", attr.height);\r\n    }\r\n    // 渲染基站\r\n    renderStation(station) {\r\n        const _x = station.x * this.scale - 15;\r\n        const _y = this.switchY(station.y * this.scale + 15);\r\n        this.svgObj.append(\"image\")\r\n            .attr(\"x\", _x)\r\n            .attr(\"y\", _y)\r\n            .attr(\"width\", \"30\")\r\n            .attr(\"height\", \"30\")\r\n            .attr(\"color\", \"red\")\r\n            .attr(\"class\", \"svg-station\")\r\n            .attr(\"xlink:href\", stationIcon);\r\n    }\r\n    // 渲染标签\r\n    renderTag(tagNo, x, y) {\r\n        // 切换坐标  标签图片的大小是30\r\n        const _x = x * this.scale - 15;\r\n        const _y = this.switchY(y * this.scale + 30);\r\n        const tag = this.svgTagList.filter(item => item.no === tagNo);\r\n        if (tag.length > 0) {\r\n            this.moveTag(tag[0], _x, _y);\r\n        }\r\n        else {\r\n            (0,_api_api__WEBPACK_IMPORTED_MODULE_3__.tagList)({\r\n                pageNo: 1,\r\n                pageSize: 10,\r\n                condition: encodeURIComponent(JSON.stringify([{\r\n                        column: \"no\",\r\n                        value: tagNo,\r\n                        type: \"eq\",\r\n                    }]))\r\n            }).then((res) => {\r\n                if (res.data && res.data.records.length > 0) {\r\n                    const d = res.data.records[0];\r\n                    this.tagList.push(d);\r\n                }\r\n            });\r\n            this.insertTag(tagNo, _x, _y);\r\n        }\r\n    }\r\n    // 标签仅渲染一次，不做移动\r\n    onlyInsertTag(tagIds) {\r\n        tagIds.forEach(no => {\r\n            (0,_api_api__WEBPACK_IMPORTED_MODULE_3__.tagList)({\r\n                pageNo: 1,\r\n                pageSize: 10,\r\n                condition: encodeURIComponent(JSON.stringify([{\r\n                        column: \"no\",\r\n                        value: no,\r\n                        type: \"eq\",\r\n                    }]))\r\n            }).then((res) => {\r\n                if (res.data && res.data.records.length > 0) {\r\n                    const d = res.data.records[0];\r\n                    this.tagList.push(d);\r\n                    const _x = d.x * this.scale - 15;\r\n                    const _y = this.switchY(d.y * this.scale + 30);\r\n                    this.insertTag(d.no, _x, _y);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // 插入标签\r\n    insertTag(tagNo, x, y) {\r\n        const self = this;\r\n        const obj = this.svgObj\r\n            .append(\"image\")\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"width\", 30)\r\n            .attr(\"height\", 30)\r\n            .attr(\"class\", \"tag-station\")\r\n            .attr(\"xlink:href\", tagIcon)\r\n            .on(\"mouseover\", function () {\r\n            self.showRectText(tagNo);\r\n        })\r\n            .on(\"mouseout\", function () {\r\n            self.hideRectText();\r\n        });\r\n        this.svgTagList.push({\r\n            no: tagNo,\r\n            obj: obj,\r\n            x: x,\r\n            y: y\r\n        });\r\n    }\r\n    // 移动标签\r\n    moveTag(tag, x, y) {\r\n        tag.x = x;\r\n        tag.y = y;\r\n        tag.obj\r\n            .attr(\"xlink:href\", tagIcon)\r\n            .transition()\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .ease(d3__WEBPACK_IMPORTED_MODULE_0__.easeLinear);\r\n    }\r\n    // 倒计时 超过60s不动则置灰\r\n    startCountdown(tag) {\r\n        if (this.countdownTimer[\"timer\" + tag.no]) {\r\n            clearTimeout(this.countdownTimer[\"timer\" + tag.no]);\r\n            delete this.countdownTimer[\"timer\" + tag.no];\r\n        }\r\n        this.countdownTimer[\"timer\" + tag.no] = setTimeout(() => {\r\n            tag.obj.attr(\"xlink:href\", tagIconGray);\r\n        }, 1000 * 60);\r\n    }\r\n    // 渲染文本提示框\r\n    renderRectText() {\r\n        const t = _lang_index__WEBPACK_IMPORTED_MODULE_1__.default.global.t;\r\n        this.svgTextObj\r\n            .append(\"rect\")\r\n            .attr(\"width\", 250)\r\n            .attr(\"height\", 100)\r\n            .attr(\"fill\", \"#000000\")\r\n            .attr(\"opacity\", 0.8);\r\n        let y = 20;\r\n        for (let i = 0; i < 4; i++) {\r\n            this.svgTextObj\r\n                .append(\"text\")\r\n                .attr(\"class\", \"text-item\" + i)\r\n                .attr(\"font-size\", 14)\r\n                .attr(\"x\", 10)\r\n                .attr(\"y\", y)\r\n                .attr(\"fill\", \"#fff\")\r\n                .text(t('columns.assetName') + \"：\");\r\n            y += 22;\r\n        }\r\n    }\r\n    // 显示文本框\r\n    showRectText(tagNo) {\r\n        const t = _lang_index__WEBPACK_IMPORTED_MODULE_1__.default.global.t;\r\n        const tag = this.tagList.filter(item => item.no === tagNo)[0];\r\n        this.svgTextObj\r\n            .select(\".text-item0\")\r\n            .text(t('columns.assetNo') + \"：\" + tag.bindNo);\r\n        this.svgTextObj\r\n            .select(\".text-item1\")\r\n            .text(t('columns.assetName') + \"：\" + tag.bindName);\r\n        this.svgTextObj\r\n            .select(\".text-item2\")\r\n            .text(t('columns.tagNo') + \"：\" + tag.no);\r\n        this.svgTextObj\r\n            .select(\".text-item3\")\r\n            .text(t('columns.tagName') + \"：\" + tag.name);\r\n        const svgTag = this.svgTagList.filter(item => item.no === tagNo)[0];\r\n        const { x, y } = this.getRectPosition(svgTag.x, svgTag.y);\r\n        this.svgTextObj\r\n            .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n            .attr(\"style\", \"display:block;\");\r\n    }\r\n    // 判断文本框的位置\r\n    getRectPosition(offsetX, offsetY) {\r\n        let x, y;\r\n        if (offsetY > 100) {\r\n            y = offsetY - 100;\r\n        }\r\n        else {\r\n            y = offsetY + 30;\r\n        }\r\n        if (offsetX > 250) {\r\n            x = offsetX - 250;\r\n        }\r\n        else {\r\n            x = offsetX + 15;\r\n        }\r\n        return {\r\n            x,\r\n            y\r\n        };\r\n    }\r\n    // 隐藏文本框\r\n    hideRectText() {\r\n        this.svgTextObj.attr(\"style\", \"display:none;\");\r\n    }\r\n    toFullScreen() {\r\n        this.element.requestFullscreen();\r\n    }\r\n}\r\nclass MapSvgRender {\r\n    element; // 渲染容器对象\r\n    transform = { k: 1, x: 0, y: 0 };\r\n    g; // svg对象\r\n    scale = 1; // 真实场景与地图之间的比例\r\n    svgHeight = 500; // 展示高度默认500\r\n    tagList = []; // 存储所有的标签数据\r\n    svgTagList = []; // 存储标签的svg对象\r\n    countdownTimer = {}; // 倒计时\r\n    constructor(element) {\r\n        this.element = element;\r\n        const zoom = d3__WEBPACK_IMPORTED_MODULE_0__.zoom().scaleExtent([0.2, 10]);\r\n        const that = this;\r\n        const g = d3__WEBPACK_IMPORTED_MODULE_0__.select(\".\" + this.element.className)\r\n            .append(\"svg\")\r\n            .attr(\"class\", \"out-svg\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"height\", \"100%\")\r\n            .call(zoom.on(\"zoom\", function (event) {\r\n            that.transform = event.transform;\r\n            g.attr(\"transform\", event.transform);\r\n        }))\r\n            .append(\"g\");\r\n        this.g = g;\r\n    }\r\n    async insertMap(svgMap) {\r\n        const attr = await this.getMapImageAttr(svgMap);\r\n        this.scale = this.calcScale(attr, svgMap);\r\n        this.svgHeight = attr.height;\r\n        this.element.style.height = attr.height + \"px\";\r\n        this.g\r\n            .append(\"image\")\r\n            .attr(\"xlink:href\", _config_common__WEBPACK_IMPORTED_MODULE_2__.img_base_url + svgMap.url)\r\n            .attr(\"width\", attr.width)\r\n            .attr(\"height\", attr.height);\r\n    }\r\n    // 获取地图图片的宽高\r\n    getMapImageAttr(svgMap) {\r\n        return new Promise((resolve, reject) => {\r\n            let url = _config_common__WEBPACK_IMPORTED_MODULE_2__.img_base_url + svgMap.url;\r\n            let img = new Image();\r\n            img.src = url;\r\n            img.onload = () => {\r\n                let imgW = img.width, imgH = img.height, svgW = this.element.offsetWidth;\r\n                if (imgW > svgW) {\r\n                    let computH = Math.floor((svgW * imgH) / imgW);\r\n                    resolve({\r\n                        width: svgW,\r\n                        height: computH,\r\n                    });\r\n                }\r\n                else {\r\n                    resolve({\r\n                        width: imgW,\r\n                        height: imgH,\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    // 计算比例\r\n    calcScale(attr, svgMap) {\r\n        const width = svgMap.width;\r\n        const height = svgMap.height;\r\n        if (!!width) {\r\n            return attr.width / (width * 1000);\r\n        }\r\n        else {\r\n            return attr.height / (height * 1000);\r\n        }\r\n    }\r\n    // 转换y轴坐标，页面零点在左上，基站定位零点在左下\r\n    switchY(y) {\r\n        return this.svgHeight - y;\r\n    }\r\n    insertStation(station, callback) {\r\n        const _x = station.x * this.scale - 12;\r\n        const _y = this.switchY(station.y * this.scale + 14);\r\n        const transform = `translate(${_x},${_y}) scale(0.028)`;\r\n        const g = this.g\r\n            .append(\"g\")\r\n            .attr(\"transform\", transform)\r\n            .attr(\"class\", \"svg-station\")\r\n            .style(\"cursor\", \"pointer\")\r\n            .on(\"click\", function () {\r\n            callback(station);\r\n        });\r\n        g.append(\"path\")\r\n            .attr(\"d\", stationPath1)\r\n            .attr(\"fill\", \"#1890ff\");\r\n        g.append(\"path\")\r\n            .attr(\"d\", stationPath2)\r\n            .attr(\"fill\", \"#1890ff\");\r\n        g.append(\"path\")\r\n            .attr(\"d\", stationPath3)\r\n            .attr(\"fill\", \"#1890ff\");\r\n    }\r\n    insertTag(tag, callback) {\r\n        // 切换坐标  标签图片的大小是30\r\n        const _x = tag.x * this.scale - 12;\r\n        const _y = this.switchY(tag.y * this.scale + 28);\r\n        const transform = `translate(${_x},${_y}) scale(0.028)`;\r\n        const g = this.g\r\n            .append(\"g\")\r\n            .attr(\"transform\", transform)\r\n            .attr(\"id\", \"svg-tag\" + tag.no)\r\n            .style(\"cursor\", \"pointer\")\r\n            .on(\"click\", function () {\r\n            callback(tag);\r\n        });\r\n        const color = tag.level > 0 ? _config_common__WEBPACK_IMPORTED_MODULE_2__.colors[tag.level - 1] : \"#008e59\";\r\n        g.append(\"path\")\r\n            .attr(\"d\", tagPath)\r\n            .attr(\"fill\", color);\r\n    }\r\n    moveTag(no, x, y) {\r\n        const _x = x * this.scale - 12;\r\n        const _y = this.switchY(y * this.scale + 28);\r\n        const transform = `translate(${_x},${_y}) scale(0.028)`;\r\n        this.g.select(\"#svg-tag\" + no).attr(\"transform\", transform);\r\n    }\r\n    toFullScreen() {\r\n        this.element.requestFullscreen();\r\n    }\r\n    showStations() {\r\n        this.g.selectAll(\".svg-station\").style(\"display\", \"block\");\r\n    }\r\n    hideStations() {\r\n        this.g.selectAll(\".svg-station\").style(\"display\", \"none\");\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://ofilm-web/./src/utils/svgMap.ts?");

/***/ })

}]);